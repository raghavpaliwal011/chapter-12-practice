introduction to python:>
data structures:>

01-string:>
There is a function in python called print function this prints the input given by a user and this 
input is called string 
print ("hello world")-->the input here in this double quote is called string

usually to identify a string simply see that the function have " or ' if it is enclosed in these signs, 
chances are that it is a string

02-list:>
list is a collection of ordered items enclosed in square brackets like this [] this is usually used to 
represent a collection of items or only a perticular item from that whole list
for example:>

list=[1,2,3,4,"banana","apple"]
# to represent only a perticular thing we use this function
print (list[0])
print (list[2])
print (list[1])

03-tuples:>
tuples are similer to lists but the difference is that these tuples are immutable, meaning their elements
cannot be changed after creation. 
for example:>

my_tuple=(1,2,3,4,5,"banana","apple")
print (my_tuple[1])
print (len(my_tuple))

04-sets:>
sets in python are a list of unordered items usually these are used to execute mathematical programmes
for example:>

my_set={1,2,3,4,5}
my_set.add(6)#this add function will add 6
my_set.remove(1)#this remove function will remove 1
print (my_set)

05-dictionary:>
dictionary in python is a collection of unordered key value pair,usually they start with curly brackets{}
and each value in them is seperated by a colon :
here key value pair means a collection of related itmes like some dictionary will revolve around your
personal details like age , nationality , name etc.
for example:>

my_dict={"name":"raghav","age":13,"country":"india"}
print(my_dict["name"])
my_dict["age"] = 14
print (my_dict)

and yes we can later on change a value even after the creation of the dictionary as shown above

06-array:>
this means the short form of any module in python


###############################################################
in short data structures in python means different operations that we will use to store data
###############################################################

NOW THAT DATA STRUCTRUES are understood lets move on to next ones 
now some functions:>

07-def:>
def function makes the code short and reusable ,like if you want to print the sum of a and b you can
write a whole code for that or you can simply write a function named def we can perform multiple tasks
with def function and we will need to call it only once and it will return your whole code
for example:>
def calculate():
    a = 5
    b = 6

    ab = print ("the sum of a and b is :>",a+b)

calculate()

08-type:>
type function returns the type of an object
for example:>
a = int(input("enter a number = "))
print (type(a)) ------->returns <class 'int'>

09-list(), tuple(), set(), dict()
this function will change between list ,tuple, set, or dict
for example:>
#list to tuple

my_list = [1,2,3,4,5,6,7]
my_tuple = tuple(my_list)
print (my_tuple)

#tuple to list 

my_tuple = (1,2,3,4,5,6,7)
my_list=list(my_tuple)
print (my_list)

#list to set
my_list=[1,2,3,4,5,6,7]
my_set = set (my_list)
print (my_list)

#creating a dictionary
my_dict = dict(name = "raghav", city = "8")
print (my_dict)
 
10-range:>
range function tells all the numbers lying between a specified range of numbers
for example:>
a = range(1,6)
print (list(a))

11-int(), float(), str():>
These functions are useful for converting values between different data types as needed in your 
Python programs.
for example:>


12-self:>
In short, self in Python is a reference to the instance of a class within the class itself.
class employee:
    def cal_sal(self):
        print (f"the salary of raghav is {self.salary}")
    
raghav = employee()
raghav.salary = 10000
raghav.cal_sal()

13-map,filter,reduce:>
map --> 
In short, the map() function in Python applies a specified function to each item in an iterable and 
returns an iterator that yields the results. It's a convenient way to apply a function to multiple 
elements of a collection without explicitly looping over each element.

filter-->
this function will filter the specified programme for example if you want the numbers in a list that are
only greater than 4 then it will only return the numbers that are greater than 4

reduce:>
first of all we will need to import this function with functools module or else it will not work
now, reduce function will do the specified work it is given to do like multiplying ,dividing, adding or
subtracting.


examples for all these:>

#map
def cube(x):
    return x*x*x
print (cube(2))
l = [1,2,3,4,5,6,7,8,9,10]
newl=list(map(cube,l))
print (newl)

#filter 
def filter_function(a):
    return a>4
newnewl = list(filter(filter_function,l))
print (newnewl)

#reduce
from functools import reduce
numbers = [3,5,4,7]
def mysum(x,y):
    return x+y
sum = reduce(mysum,numbers)
print (sum)

14-append:>
this function will modify a list by adding the element which was not in it earlier 
for example:>
l = [1,2,3,4,5,6,7,8,9]
l.append(10)
print (l)

15-lambda:>
lambda is optional to use we can also use def in the place of lambda but lambda is good and we simply dont
need to write a big 3-4 line code instead of that we can complete the code in just one line. it is useful
for mathematical operations like taking cube or square of any perticular number 
for example:>
square = lambda x : x*x
cube = lambda x : x*x*x
print (square(5))
print (cube(5))



THIS WAS THE Python introduction 

HAPPY CODING :>
